name: CI-CD Swarm

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'

      # Jar exécutable
      - name: Build app (Maven)
        run: mvn -q -DskipTests package spring-boot:repackage

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Tag d'image en minuscules (GHCR n'accepte pas les majuscules)
      - name: Compute image ref (lowercase)
        run: |
          OWNER_LC=${GITHUB_REPOSITORY_OWNER,,}
          REPO_LC=${GITHUB_REPOSITORY#*/}
          REPO_LC=${REPO_LC,,}
          echo "OWNER_LC=$OWNER_LC" >> $GITHUB_ENV
          echo "REPO_LC=$REPO_LC"   >> $GITHUB_ENV
          echo "IMAGE=${REGISTRY}/${OWNER_LC}/${REPO_LC}:latest" >> $GITHUB_ENV

      - name: Build & Push image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ env.IMAGE }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Copie TOUT le dossier deploy/ (stack + configs monitoring)
      - name: Copy deploy artifacts to VM
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: azureuser
          key: ${{ secrets.SSH_KEY }}
          source: "deploy/*"
          target: "/home/azureuser/"

      # Déploiement via SSH "raw" (plus robuste que l'action ssh)
      - name: Deploy to Swarm via RAW SSH
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_KEY: ${{ secrets.SSH_KEY }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          GH_OWNER: ${{ github.repository_owner }}
          GH_REPO:  ${{ github.repository }}
          GH_ACTOR: ${{ github.actor }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          # Prépare la clé
          mkdir -p ~/.ssh
          echo "$SSH_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

          # Owner/Repo en minuscules pour GHCR
          OWNER_LC=$(echo "$GH_OWNER" | tr '[:upper:]' '[:lower:]')
          REPO_LC=$(echo "$GH_REPO"  | cut -d/ -f2 | tr '[:upper:]' '[:lower:]')
          IMAGE="ghcr.io/${OWNER_LC}/${REPO_LC}:latest"

          # Exécution distante
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa azureuser@"$SSH_HOST" "
            set -euo pipefail
            cd /home/azureuser/deploy
            echo Using image: ${IMAGE}
            ls -lah .

            docker login ghcr.io -u '${GH_ACTOR}' -p '${GH_TOKEN}'
            docker pull '${IMAGE}' || true

            export GITHUB_OWNER='${OWNER_LC}'
            export REPO_NAME='${REPO_LC}'
            export DB_PASSWORD='${DB_PASSWORD}'

            docker stack deploy -c docker-stack.yml swarmdemo

            docker service ls
            docker service ps swarmdemo_app || true
            docker service ps swarmdemo_postgres || true
          "
